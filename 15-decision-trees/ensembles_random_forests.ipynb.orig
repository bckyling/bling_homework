{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<img src=\"http://imgur.com/1ZcRyrc.png\" style=\"float: left; margin: 20px; height: 55px\">\n",
    " \n",
    "# Ensembles and Random Forests\n",
    " \n",
    "_Author: Joseph Nelson (DC)_\n",
    "\n",
    "*Adapted from Chapter 8 of [An Introduction to Statistical Learning](http://www-bcf.usc.edu/~gareth/ISL/)*\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Learning Objectives\n",
    "\n",
    "Students will be able to:\n",
    "\n",
    "- Understand how and why decision trees can be improved using bagging and random forests.\n",
    "- Build random forest models for classification and regression.\n",
    "- Know how to extract the most important predictors in a random forest model.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Lesson Guide\n",
    "- [Introduction](#introduction)\n",
    "- [Part 1: Manual Ensembling](#part-one)\n",
    "- [Part 2: Bagging](#part-two)\n",
    "    - [Manually Implementing Bagged Decision Trees](#manual-bagged)\n",
    "    - [Bagged Decision Trees in `scikit-learn`](#manual-sklearn)\n",
    "    - [Estimating Out-of-Sample Error](#oos-error)\n",
    "    \n",
    "    \n",
    "- [Part 3: Random Forests](#part-three)\n",
    "- [Part 4: Building and Tuning Decision Trees and Random Forests](#part-four)\n",
    "    - [Optional: Predicting Salary With a Decision Tree](#decision-tree)\n",
    "    - [Predicting Salary With a Random Forest](#random-forest-demo)\n",
    "    - [Comparing Random Forests With Decision Trees](#comparing)\n",
    "    \n",
    "    \n",
    "- [Optional: Tuning Individual Parameters](#tuning)\n",
    "- [Summary](#summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"introduction\"></a>\n",
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### What is Ensembling?\n",
    "\n",
    "**Ensemble learning (or \"ensembling\")** is the process of combining several predictive models in order to produce a combined model that is more accurate than any individual model. For example, given predictions from several models we could:\n",
    "\n",
    "- **Regression:** Take the average of the predictions.\n",
    "- **Classification:** Take a vote and use the most common prediction.\n",
    "\n",
    "For ensembling to work well, the models must be:\n",
    "\n",
    "- **Accurate:** They outperform the null model.\n",
    "- **Independent:** Their predictions are generated using different processes.\n",
    "\n",
    "**The big idea:** If you have a collection of individually imperfect (and independent) models, the \"one-off\" mistakes made by each model are probably not going to be made by the rest of the models, and thus the mistakes will be discarded when you average the models.\n",
    "\n",
    "There are two basic **methods for ensembling:**\n",
    "\n",
    "- Manually ensembling your individual models.\n",
    "- Using a model that ensembles for you."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"part-one\"></a>\n",
    "## Part 1: Manual Ensembling\n",
    "\n",
    "What makes an effective manual ensemble?\n",
    "\n",
    "- Different types of **models**.\n",
    "- Different combinations of **features**.\n",
    "- Different **tuning parameters**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "![Machine learning flowchart](assets/crowdflower_ensembling.jpg)\n",
    "\n",
    "*Machine learning flowchart created by the [winner](https://github.com/ChenglongChen/Kaggle_CrowdFlower) of Kaggle's [CrowdFlower competition](https://www.kaggle.com/c/crowdflower-search-relevance)*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Comparing Manual Ensembling With a Single Model Approach\n",
    "\n",
    "**Advantages of manual ensembling:**\n",
    "\n",
    "- It increases predictive accuracy.\n",
    "- It's easy to get started.\n",
    "\n",
    "**Disadvantages of manual ensembling:**\n",
    "\n",
    "- It decreases interpretability.\n",
    "- It takes longer to train.\n",
    "- It takes longer to predict.\n",
    "- It is more complex to automate and maintain.\n",
    "- Small gains in accuracy may not be worth the added complexity."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"part-two\"></a>\n",
    "## Part 2: Bagging\n",
    "\n",
    "The primary weakness of **decision trees** is that they don't tend to have the best predictive accuracy. This is partially because of **high variance**, meaning that different splits in the training data can lead to very different trees.\n",
    "\n",
    "**Bagging** is a general-purpose procedure for reducing the variance of a machine learning method but is particularly useful for decision trees. Bagging is short for **bootstrap aggregation**, meaning the aggregation of bootstrap samples.\n",
    "\n",
    "A **bootstrap sample** is a random sample with replacement. So, it has the same size as the original sample but might duplicate some of the original observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]\n",
      "[ 6 12 13  9 10 12  6 16  1 17  2 13  8 14  7 19  6 19 12 11]\n"
     ]
    }
   ],
   "source": [
    "# Set a seed for reproducibility.\n",
    "np.random.seed(1)\n",
    "\n",
    "# Create an array of 1 through 20.\n",
    "nums = np.arange(1, 21)\n",
    "print(nums)\n",
    "\n",
    "# Sample that array 20 times with replacement.\n",
    "print(np.random.choice(a=nums, size=20, replace=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "**How does bagging work (for decision trees)?**\n",
    "\n",
    "1. Grow B trees using B bootstrap samples from the training data.\n",
    "2. Train each tree on its bootstrap sample and make predictions.\n",
    "3. Combine the predictions:\n",
    "    - Average the predictions for **regression trees**.\n",
    "    - Take a vote for **classification trees**.\n",
    "\n",
    "Notes:\n",
    "\n",
    "- **Each bootstrap sample** should be the same size as the original training set. (It may contain repeated rows.)\n",
    "- **B** should be a large enough value that the error seems to have \"stabilized\".\n",
    "- The trees are **grown deep** so that they have low bias/high variance.\n",
    "\n",
    "Bagging increases predictive accuracy by **reducing the variance**, similar to how cross-validation reduces the variance associated with train/test split (for estimating out-of-sample error) by splitting many times an averaging the results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"manual-bagged\"></a>\n",
    "## Manually Implementing Bagged Decision Trees (with B=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>year</th>\n",
       "      <th>miles</th>\n",
       "      <th>doors</th>\n",
       "      <th>vtype</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22000</td>\n",
       "      <td>2012</td>\n",
       "      <td>13000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14000</td>\n",
       "      <td>2010</td>\n",
       "      <td>30000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13000</td>\n",
       "      <td>2010</td>\n",
       "      <td>73500</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9500</td>\n",
       "      <td>2009</td>\n",
       "      <td>78000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9000</td>\n",
       "      <td>2007</td>\n",
       "      <td>47000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4000</td>\n",
       "      <td>2006</td>\n",
       "      <td>124000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3000</td>\n",
       "      <td>2004</td>\n",
       "      <td>177000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2000</td>\n",
       "      <td>2004</td>\n",
       "      <td>209000</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3000</td>\n",
       "      <td>2003</td>\n",
       "      <td>138000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1900</td>\n",
       "      <td>2003</td>\n",
       "      <td>160000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2500</td>\n",
       "      <td>2003</td>\n",
       "      <td>190000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5000</td>\n",
       "      <td>2001</td>\n",
       "      <td>62000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1800</td>\n",
       "      <td>1999</td>\n",
       "      <td>163000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1300</td>\n",
       "      <td>1997</td>\n",
       "      <td>138000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    price  year   miles  doors  vtype\n",
       "0   22000  2012   13000      2      0\n",
       "1   14000  2010   30000      2      0\n",
       "2   13000  2010   73500      4      0\n",
       "3    9500  2009   78000      4      0\n",
       "4    9000  2007   47000      4      0\n",
       "5    4000  2006  124000      2      0\n",
       "6    3000  2004  177000      4      0\n",
       "7    2000  2004  209000      4      1\n",
       "8    3000  2003  138000      2      0\n",
       "9    1900  2003  160000      4      0\n",
       "10   2500  2003  190000      2      1\n",
       "11   5000  2001   62000      4      0\n",
       "12   1800  1999  163000      2      1\n",
       "13   1300  1997  138000      4      0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read in and prepare the vehicle training data.\n",
    "import pandas as pd\n",
    "\n",
    "path = './data/vehicles_train.csv'\n",
    "train = pd.read_csv(path)\n",
    "train['vtype'] = train.vtype.map({'car':0, 'truck':1})\n",
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([13,  2, 12,  2,  6,  1,  3, 10, 11,  9,  6,  1,  0,  1]),\n",
       " array([ 9,  0,  0,  9,  3, 13,  4,  0,  0,  4,  1,  7,  3,  2]),\n",
       " array([ 4,  7,  2,  4,  8, 13,  0,  7,  9,  3, 12, 12,  4,  6]),\n",
       " array([ 1,  5,  6, 11,  2,  1, 12,  8,  3, 10,  5,  0, 11,  2]),\n",
       " array([10, 10,  6, 13,  2,  4, 11, 11, 13, 12,  4,  6, 13,  3]),\n",
       " array([10,  0,  6,  4,  7, 11,  6,  7,  1, 11, 10,  5,  7,  9]),\n",
       " array([ 2,  4,  8,  1, 12,  2,  1,  1,  3, 12,  5,  9,  0,  8]),\n",
       " array([11,  1,  6,  3,  3, 11,  5,  9,  7,  9,  2,  3, 11,  3]),\n",
       " array([ 3,  8,  6,  9,  7,  6,  3,  9,  6, 12,  6, 11,  6,  1]),\n",
       " array([13, 10,  3,  4,  3,  1, 13,  0,  5,  8, 13,  6, 11,  8])]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set a seed for reproducibility.\n",
    "np.random.seed(123)\n",
    "\n",
    "# Create ten bootstrap samples (which will be used to select rows from the DataFrame).\n",
    "samples = [np.random.choice(a=14, size=14, replace=True) \n",
    "           for _ in range(1, 11)]\n",
    "samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>year</th>\n",
       "      <th>miles</th>\n",
       "      <th>doors</th>\n",
       "      <th>vtype</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1300</td>\n",
       "      <td>1997</td>\n",
       "      <td>138000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13000</td>\n",
       "      <td>2010</td>\n",
       "      <td>73500</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1800</td>\n",
       "      <td>1999</td>\n",
       "      <td>163000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13000</td>\n",
       "      <td>2010</td>\n",
       "      <td>73500</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3000</td>\n",
       "      <td>2004</td>\n",
       "      <td>177000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14000</td>\n",
       "      <td>2010</td>\n",
       "      <td>30000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9500</td>\n",
       "      <td>2009</td>\n",
       "      <td>78000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2500</td>\n",
       "      <td>2003</td>\n",
       "      <td>190000</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5000</td>\n",
       "      <td>2001</td>\n",
       "      <td>62000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1900</td>\n",
       "      <td>2003</td>\n",
       "      <td>160000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3000</td>\n",
       "      <td>2004</td>\n",
       "      <td>177000</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14000</td>\n",
       "      <td>2010</td>\n",
       "      <td>30000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22000</td>\n",
       "      <td>2012</td>\n",
       "      <td>13000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14000</td>\n",
       "      <td>2010</td>\n",
       "      <td>30000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    price  year   miles  doors  vtype\n",
       "13   1300  1997  138000      4      0\n",
       "2   13000  2010   73500      4      0\n",
       "12   1800  1999  163000      2      1\n",
       "2   13000  2010   73500      4      0\n",
       "6    3000  2004  177000      4      0\n",
       "1   14000  2010   30000      2      0\n",
       "3    9500  2009   78000      4      0\n",
       "10   2500  2003  190000      2      1\n",
       "11   5000  2001   62000      4      0\n",
       "9    1900  2003  160000      4      0\n",
       "6    3000  2004  177000      4      0\n",
       "1   14000  2010   30000      2      0\n",
       "0   22000  2012   13000      2      0\n",
       "1   14000  2010   30000      2      0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the rows for the first decision tree.\n",
    "train.iloc[samples[0], :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>year</th>\n",
       "      <th>miles</th>\n",
       "      <th>doors</th>\n",
       "      <th>vtype</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3000</td>\n",
       "      <td>2003</td>\n",
       "      <td>130000</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6000</td>\n",
       "      <td>2005</td>\n",
       "      <td>82500</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12000</td>\n",
       "      <td>2010</td>\n",
       "      <td>60000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   price  year   miles  doors  vtype\n",
       "0   3000  2003  130000      4      1\n",
       "1   6000  2005   82500      4      0\n",
       "2  12000  2010   60000      2      0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read in and prepare the vehicle testing data.\n",
    "path = './data/vehicles_test.csv'\n",
    "test = pd.read_csv(path)\n",
    "test['vtype'] = test.vtype.map({'car':0, 'truck':1})\n",
    "test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1300.,  5000., 14000.],\n",
       "       [ 1300.,  1300., 13000.],\n",
       "       [ 3000.,  3000., 13000.],\n",
       "       [ 4000.,  5000., 13000.],\n",
       "       [ 1300.,  5000., 13000.],\n",
       "       [ 4000.,  5000., 14000.],\n",
       "       [ 4000.,  4000., 13000.],\n",
       "       [ 4000.,  5000., 13000.],\n",
       "       [ 3000.,  5000.,  9500.],\n",
       "       [ 4000.,  5000.,  9000.]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "# Grow each tree deep.\n",
    "treereg = DecisionTreeRegressor(max_depth=None, random_state=123)\n",
    "\n",
    "# List for storing predicted price from each tree:\n",
    "predictions = []\n",
    "\n",
    "# Define testing data.\n",
    "X_test = test.iloc[:, 1:]\n",
    "y_test = test.iloc[:, 0]\n",
    "\n",
    "# Grow one tree for each bootstrap sample and make predictions on testing data.\n",
    "for sample in samples:\n",
    "    X_train = train.iloc[sample, 1:]\n",
    "    y_train = train.iloc[sample, 0]\n",
    "    treereg.fit(X_train, y_train)\n",
    "    y_pred = treereg.predict(X_test)\n",
    "    predictions.append(y_pred)\n",
    "\n",
    "# Convert predictions from list to NumPy array.\n",
    "predictions = np.array(predictions)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 2990.,  4330., 12450.])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average predictions.\n",
    "np.mean(predictions, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "998.5823284370031"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate RMSE.\n",
    "from sklearn import metrics\n",
    "y_pred = np.mean(predictions, axis=0)\n",
    "np.sqrt(metrics.mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"manual-sklearn\"></a>\n",
    "## Bagged Decision Trees in `scikit-learn` (with B=500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Define the training and testing sets.\n",
    "X_train = train.iloc[:, 1:]\n",
    "y_train = train.iloc[:, 0]\n",
    "X_test = test.iloc[:, 1:]\n",
    "y_test = test.iloc[:, 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Instruct BaggingRegressor to use DecisionTreeRegressor as the \"base estimator.\"\n",
    "from sklearn.ensemble import BaggingRegressor\n",
    "bagreg = BaggingRegressor(DecisionTreeRegressor(), n_estimators=500, \n",
    "                          bootstrap=True, oob_score=True, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 3344.2,  5395. , 12902. ])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit and predict.\n",
    "bagreg.fit(X_train, y_train)\n",
    "y_pred = bagreg.predict(X_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "657.8000304043775"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate RMSE.\n",
    "np.sqrt(metrics.mean_squared_error(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"oos-error\"></a>\n",
    "## Estimating Out-of-Sample Error\n",
    "\n",
    "For bagged models, out-of-sample error can be estimated without using **train/test split** or **cross-validation**!\n",
    "\n",
    "For each tree, the **unused observations** are called \"out-of-bag\" observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([13,  2, 12,  2,  6,  1,  3, 10, 11,  9,  6,  1,  0,  1])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the first bootstrap sample.\n",
    "samples[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0, 1, 2, 3, 6, 9, 10, 11, 12, 13}\n",
      "{0, 1, 2, 3, 4, 7, 9, 13}\n",
      "{0, 2, 3, 4, 6, 7, 8, 9, 12, 13}\n",
      "{0, 1, 2, 3, 5, 6, 8, 10, 11, 12}\n",
      "{2, 3, 4, 6, 10, 11, 12, 13}\n",
      "{0, 1, 4, 5, 6, 7, 9, 10, 11}\n",
      "{0, 1, 2, 3, 4, 5, 8, 9, 12}\n",
      "{1, 2, 3, 5, 6, 7, 9, 11}\n",
      "{1, 3, 6, 7, 8, 9, 11, 12}\n",
      "{0, 1, 3, 4, 5, 6, 8, 10, 11, 13}\n"
     ]
    }
   ],
   "source": [
    "# Show the \"in-bag\" observations for each sample.\n",
    "for sample in samples:\n",
    "    print(set(sample))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 5, 7, 8]\n",
      "[5, 6, 8, 10, 11, 12]\n",
      "[1, 5, 10, 11]\n",
      "[4, 7, 9, 13]\n",
      "[0, 1, 5, 7, 8, 9]\n",
      "[2, 3, 8, 12, 13]\n",
      "[6, 7, 10, 11, 13]\n",
      "[0, 4, 8, 10, 12, 13]\n",
      "[0, 2, 4, 5, 10, 13]\n",
      "[2, 7, 9, 12]\n"
     ]
    }
   ],
   "source": [
    "# Show the \"out-of-bag\" observations for each sample.\n",
    "for sample in samples:\n",
    "    print(sorted(set(range(14)) - set(sample)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "**Calculating \"out-of-bag error:\"**\n",
    "\n",
    "1. For each observation in the training data, predict its response value using **only** the trees in which that observation was out-of-bag. Average those predictions (for regression) or take a vote (for classification).\n",
    "2. Compare all predictions to the actual response values in order to compute the out-of-bag error.\n",
    "\n",
    "When B is sufficiently large, the **out-of-bag error** is an accurate estimate of **out-of-sample error**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7986955133989982"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute the out-of-bag R-squared score (not MSE, unfortunately) for B=500.\n",
    "bagreg.oob_score_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Estimating Feature Importance\n",
    "\n",
    "Bagging increases **predictive accuracy** but decreases **model interpretability** because it's no longer possible to visualize the tree to understand the importance of each feature.\n",
    "\n",
    "However, we can still obtain an overall summary of **feature importance** from bagged models:\n",
    "\n",
    "- **Bagged regression trees:** Calculate the total amount that **MSE** decreases due to splits over a given feature, averaged over all trees\n",
    "- **Bagged classification trees:** Calculate the total amount that **Gini index** decreases due to splits over a given feature, averaged over all trees"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"part-three\"></a>\n",
    "## Part 3: Random Forests\n",
    "\n",
    "Random Forests offer a **slight variation on bagged trees** with even better performance:\n",
    "\n",
    "- Exactly like bagging, we create an ensemble of decision trees using bootstrapped samples of the training set.\n",
    "- However, when building each tree, each time a split is considered, a **random sample of m features** is chosen as split candidates from the **full set of p features**. The split is only allowed to use **one of those m features**.\n",
    "    - A new random sample of features is chosen for **every single tree at every single split**.\n",
    "    - For **classification**, m is typically chosen to be the square root of p.\n",
    "    - For **regression**, m is typically chosen to be somewhere between p/3 and p.\n",
    "\n",
    "What's the point?\n",
    "\n",
    "- Suppose there is **one very strong feature** in the data set. When using bagged trees, most of the trees will use that feature as the top split, resulting in an ensemble of similar trees that are **highly correlated**.\n",
    "- Averaging highly correlated quantities does not significantly reduce variance (which is the entire goal of bagging).\n",
    "- By randomly leaving out candidate features from each split, **random forests \"decorrelate\" the trees** to the extent that the averaging process can reduce the variance of the resulting model.\n",
    "- Another way of looking at it is that sometimes one or two strong features dominate every tree in bagging, resulting in essentially the same tree as every predictor. (This is what was meant when saying the trees could be highly correlated.) By using a subset of features to generate each tree, we get a wider variety of predictive trees that do not all use the same dominant features."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"part-four\"></a>\n",
    "## Part 4: Building and Tuning Decision Trees and Random Forests\n",
    "\n",
    "In this section, we will implement random forests in scikit-learn.\n",
    "\n",
    "- Major League Baseball player data from 1986-87: [data](https://github.com/justmarkham/DAT8/blob/master/data/hitters.csv), [data dictionary](https://cran.r-project.org/web/packages/ISLR/ISLR.pdf) (page 7)\n",
    "- Each observation represents a player.\n",
    "- **Goal:** Predict player salary."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Preparing the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Read in the data.\n",
    "path ='./data/hitters.csv'\n",
    "hitters = pd.read_csv(path)\n",
    "\n",
    "# Remove rows with missing values.\n",
    "hitters.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AtBat</th>\n",
       "      <th>Hits</th>\n",
       "      <th>HmRun</th>\n",
       "      <th>Runs</th>\n",
       "      <th>RBI</th>\n",
       "      <th>Walks</th>\n",
       "      <th>Years</th>\n",
       "      <th>CAtBat</th>\n",
       "      <th>CHits</th>\n",
       "      <th>CHmRun</th>\n",
       "      <th>CRuns</th>\n",
       "      <th>CRBI</th>\n",
       "      <th>CWalks</th>\n",
       "      <th>League</th>\n",
       "      <th>Division</th>\n",
       "      <th>PutOuts</th>\n",
       "      <th>Assists</th>\n",
       "      <th>Errors</th>\n",
       "      <th>Salary</th>\n",
       "      <th>NewLeague</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>315</td>\n",
       "      <td>81</td>\n",
       "      <td>7</td>\n",
       "      <td>24</td>\n",
       "      <td>38</td>\n",
       "      <td>39</td>\n",
       "      <td>14</td>\n",
       "      <td>3449</td>\n",
       "      <td>835</td>\n",
       "      <td>69</td>\n",
       "      <td>321</td>\n",
       "      <td>414</td>\n",
       "      <td>375</td>\n",
       "      <td>N</td>\n",
       "      <td>W</td>\n",
       "      <td>632</td>\n",
       "      <td>43</td>\n",
       "      <td>10</td>\n",
       "      <td>475.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>479</td>\n",
       "      <td>130</td>\n",
       "      <td>18</td>\n",
       "      <td>66</td>\n",
       "      <td>72</td>\n",
       "      <td>76</td>\n",
       "      <td>3</td>\n",
       "      <td>1624</td>\n",
       "      <td>457</td>\n",
       "      <td>63</td>\n",
       "      <td>224</td>\n",
       "      <td>266</td>\n",
       "      <td>263</td>\n",
       "      <td>A</td>\n",
       "      <td>W</td>\n",
       "      <td>880</td>\n",
       "      <td>82</td>\n",
       "      <td>14</td>\n",
       "      <td>480.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>496</td>\n",
       "      <td>141</td>\n",
       "      <td>20</td>\n",
       "      <td>65</td>\n",
       "      <td>78</td>\n",
       "      <td>37</td>\n",
       "      <td>11</td>\n",
       "      <td>5628</td>\n",
       "      <td>1575</td>\n",
       "      <td>225</td>\n",
       "      <td>828</td>\n",
       "      <td>838</td>\n",
       "      <td>354</td>\n",
       "      <td>N</td>\n",
       "      <td>E</td>\n",
       "      <td>200</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>500.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>321</td>\n",
       "      <td>87</td>\n",
       "      <td>10</td>\n",
       "      <td>39</td>\n",
       "      <td>42</td>\n",
       "      <td>30</td>\n",
       "      <td>2</td>\n",
       "      <td>396</td>\n",
       "      <td>101</td>\n",
       "      <td>12</td>\n",
       "      <td>48</td>\n",
       "      <td>46</td>\n",
       "      <td>33</td>\n",
       "      <td>N</td>\n",
       "      <td>E</td>\n",
       "      <td>805</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "      <td>91.5</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>594</td>\n",
       "      <td>169</td>\n",
       "      <td>4</td>\n",
       "      <td>74</td>\n",
       "      <td>51</td>\n",
       "      <td>35</td>\n",
       "      <td>11</td>\n",
       "      <td>4408</td>\n",
       "      <td>1133</td>\n",
       "      <td>19</td>\n",
       "      <td>501</td>\n",
       "      <td>336</td>\n",
       "      <td>194</td>\n",
       "      <td>A</td>\n",
       "      <td>W</td>\n",
       "      <td>282</td>\n",
       "      <td>421</td>\n",
       "      <td>25</td>\n",
       "      <td>750.0</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   AtBat  Hits  HmRun  Runs  RBI  Walks  Years  CAtBat  CHits  CHmRun  CRuns  \\\n",
       "1    315    81      7    24   38     39     14    3449    835      69    321   \n",
       "2    479   130     18    66   72     76      3    1624    457      63    224   \n",
       "3    496   141     20    65   78     37     11    5628   1575     225    828   \n",
       "4    321    87     10    39   42     30      2     396    101      12     48   \n",
       "5    594   169      4    74   51     35     11    4408   1133      19    501   \n",
       "\n",
       "   CRBI  CWalks League Division  PutOuts  Assists  Errors  Salary NewLeague  \n",
       "1   414     375      N        W      632       43      10   475.0         N  \n",
       "2   266     263      A        W      880       82      14   480.0         A  \n",
       "3   838     354      N        E      200       11       3   500.0         N  \n",
       "4    46      33      N        E      805       40       4    91.5         N  \n",
       "5   336     194      A        W      282      421      25   750.0         A  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hitters.head()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 19,
   "metadata": {},
||||||| merged common ancestors
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 20,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AtBat</th>\n",
       "      <th>Hits</th>\n",
       "      <th>HmRun</th>\n",
       "      <th>Runs</th>\n",
       "      <th>RBI</th>\n",
       "      <th>Walks</th>\n",
       "      <th>Years</th>\n",
       "      <th>CAtBat</th>\n",
       "      <th>CHits</th>\n",
       "      <th>CHmRun</th>\n",
       "      <th>CRuns</th>\n",
       "      <th>CRBI</th>\n",
       "      <th>CWalks</th>\n",
       "      <th>League</th>\n",
       "      <th>Division</th>\n",
       "      <th>PutOuts</th>\n",
       "      <th>Assists</th>\n",
       "      <th>Errors</th>\n",
       "      <th>Salary</th>\n",
       "      <th>NewLeague</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>315</td>\n",
       "      <td>81</td>\n",
       "      <td>7</td>\n",
       "      <td>24</td>\n",
       "      <td>38</td>\n",
       "      <td>39</td>\n",
       "      <td>14</td>\n",
       "      <td>3449</td>\n",
       "      <td>835</td>\n",
       "      <td>69</td>\n",
       "      <td>321</td>\n",
       "      <td>414</td>\n",
       "      <td>375</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>632</td>\n",
       "      <td>43</td>\n",
       "      <td>10</td>\n",
       "      <td>475.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>479</td>\n",
       "      <td>130</td>\n",
       "      <td>18</td>\n",
       "      <td>66</td>\n",
       "      <td>72</td>\n",
       "      <td>76</td>\n",
       "      <td>3</td>\n",
       "      <td>1624</td>\n",
       "      <td>457</td>\n",
       "      <td>63</td>\n",
       "      <td>224</td>\n",
       "      <td>266</td>\n",
       "      <td>263</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>880</td>\n",
       "      <td>82</td>\n",
       "      <td>14</td>\n",
       "      <td>480.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>496</td>\n",
       "      <td>141</td>\n",
       "      <td>20</td>\n",
       "      <td>65</td>\n",
       "      <td>78</td>\n",
       "      <td>37</td>\n",
       "      <td>11</td>\n",
       "      <td>5628</td>\n",
       "      <td>1575</td>\n",
       "      <td>225</td>\n",
       "      <td>828</td>\n",
       "      <td>838</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>200</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>500.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>321</td>\n",
       "      <td>87</td>\n",
       "      <td>10</td>\n",
       "      <td>39</td>\n",
       "      <td>42</td>\n",
       "      <td>30</td>\n",
       "      <td>2</td>\n",
       "      <td>396</td>\n",
       "      <td>101</td>\n",
       "      <td>12</td>\n",
       "      <td>48</td>\n",
       "      <td>46</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>805</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "      <td>91.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>594</td>\n",
       "      <td>169</td>\n",
       "      <td>4</td>\n",
       "      <td>74</td>\n",
       "      <td>51</td>\n",
       "      <td>35</td>\n",
       "      <td>11</td>\n",
       "      <td>4408</td>\n",
       "      <td>1133</td>\n",
       "      <td>19</td>\n",
       "      <td>501</td>\n",
       "      <td>336</td>\n",
       "      <td>194</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>282</td>\n",
       "      <td>421</td>\n",
       "      <td>25</td>\n",
       "      <td>750.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   AtBat  Hits  HmRun  Runs  RBI  Walks  Years  CAtBat  CHits  CHmRun  CRuns  \\\n",
       "1    315    81      7    24   38     39     14    3449    835      69    321   \n",
       "2    479   130     18    66   72     76      3    1624    457      63    224   \n",
       "3    496   141     20    65   78     37     11    5628   1575     225    828   \n",
       "4    321    87     10    39   42     30      2     396    101      12     48   \n",
       "5    594   169      4    74   51     35     11    4408   1133      19    501   \n",
       "\n",
       "   CRBI  CWalks  League  Division  PutOuts  Assists  Errors  Salary  NewLeague  \n",
       "1   414     375       0         0      632       43      10   475.0          0  \n",
       "2   266     263       1         0      880       82      14   480.0          1  \n",
       "3   838     354       0         1      200       11       3   500.0          0  \n",
       "4    46      33       0         1      805       40       4    91.5          0  \n",
       "5   336     194       1         0      282      421      25   750.0          1  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Encode categorical variables as integers.\n",
    "hitters['League'] = pd.factorize(hitters.League)[0]\n",
    "hitters['Division'] = pd.factorize(hitters.Division)[0]\n",
    "hitters['NewLeague'] = pd.factorize(hitters.NewLeague)[0]\n",
    "hitters.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Allow plots to appear in the notebook.\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 21,
   "metadata": {},
||||||| merged common ancestors
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 22,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "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\ngUkAAAAASUVORK5CYII=\n",
||||||| merged common ancestors
      "image/png": "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\nYII=\n",
=======
      "image/png": "\n",
>>>>>>> upstream/master
      "text/plain": [
<<<<<<< HEAD
       "<matplotlib.figure.Figure at 0x20b25976710>"
||||||| merged common ancestors
       "<matplotlib.figure.Figure at 0x112c540b8>"
=======
       "<Figure size 432x288 with 2 Axes>"
>>>>>>> upstream/master
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a scatter plot of hits vs years, colored by salary\n",
    "hitters.plot(kind='scatter', x='Years', y='Hits', c='Salary', colormap='jet', xlim=(0, 25), ylim=(0, 250));"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 22,
   "metadata": {},
||||||| merged common ancestors
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 23,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['AtBat', 'Hits', 'HmRun', 'Runs', 'RBI', 'Walks', 'Years', 'League',\n",
       "       'Division', 'PutOuts', 'Assists', 'Errors', 'NewLeague'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define features: Exclude career statistics (which start with \"C\") and the response (salary).\n",
    "feature_cols = hitters.columns[hitters.columns.str.startswith('C') == False].drop('Salary')\n",
    "feature_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Define X and y.\n",
    "X = hitters[feature_cols]\n",
    "y = hitters.Salary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"decision-tree\"></a>\n",
    "## Optional: Predicting Salary With a Decision Tree\n",
    "\n",
    "Let's first recall how we might predict salary using a single decision tree.\n",
    "\n",
    "We'll first find the best **max_depth** for a decision tree using cross-validation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# List of values to try for max_depth:\n",
    "max_depth_range = list(range(1, 21))\n",
    "\n",
    "# List to store the average RMSE for each value of max_depth:\n",
    "RMSE_scores = []\n",
    "\n",
    "# Use 10-fold cross-validation with each value of max_depth.\n",
    "from sklearn.model_selection import cross_val_score\n",
    "for depth in max_depth_range:\n",
    "    treereg = DecisionTreeRegressor(max_depth=depth, random_state=1)\n",
    "    MSE_scores = cross_val_score(treereg, X, y, cv=10, scoring='neg_mean_squared_error')\n",
    "    RMSE_scores.append(np.mean(np.sqrt(-MSE_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
<<<<<<< HEAD
      "image/png": "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\nRU5ErkJggg==\n",
||||||| merged common ancestors
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAELCAYAAADDZxFQAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xd8XOWV//HPUbPkIslFcpHkAi64YNlG9MSAMd3UhQBp\nQEggCckmm03dFMLml9+G3WQ3JL8NgRASWhISwIQANr0EYgzulgu2ABtLlixXybItW+X8/pgrI+SR\nZmzpzkjy9/16zUt37n3unePxaI7u89z7HHN3RERE2kpJdgAiItI9KUGIiEhUShAiIhKVEoSIiESl\nBCEiIlEpQYiISFRKECIiEpUShIiIRKUEISIiUaUlO4DOGDJkiI8ePTrZYYiI9CiLFy/e5u55sdr1\n6AQxevRoFi1alOwwRER6FDPbGE87dTGJiEhUShAiIhKVEoSIiESlBCEiIlEpQYiISFRKECIiEpUS\nhIiIRKUEIUedA43NPLWikq279yc7FJFurUffKCdyJB54YyM/enI1aSnGmRPyuaqkkFnH5ZOeqr+X\nRFoLPUGYWSqwCKhw9zmt1v8SuMHd+wfP+wD3AycA24Gr3X1D2PHJ0aW52XlgwQamFGRz+tghPLak\ngufXbGFwvwwum17AlScUMnF4drLDFOkWEnEG8RVgDXDwt87MSoDcNu1uBHa6+1gzuwa4Hbg6AfHJ\nUeTvZdvYsH0vd1wzjUunFfCNcyfw9/Xb+MviTdy/YAO/fe09phRkc9UJRVxSPIKB/TKSHbJI0pi7\nh3dws0LgPuDHwNfcfU5wRvE88HFgfasziGeAH7r7AjNLA6qAPO8gwJKSEtdcTHI4bvz9Wywv38Xr\n355Fn7TUD23buecAf11WwSNLyimtqCUjNYXZk/K56oQiPjpuCGnqgpJewswWu3tJrHZhn0H8HPgm\nMKDVui8BT7h7pZm1blsAbAJw90YzqwEGA9taNzKzm4CbAEaOHBle5NLrbNqxlxffruZLZ409JDkA\nDOyXwfWnj+H608ewprKWvywq5/FlFTy9sor8AX24fEYBV51QxNj8/kmIXiTxQksQZjYHqHb3xWZ2\nZrBuBHAVcGa0XaKsO+Tswd3vBu6GyBlEV8Urvd+Db2wkxYyPnxz7D4uJw7P5wcWT+PYFx/HS29X8\nZVE59/z9Pe565V2mj8zlyhMKuXDKcHVBSa8W5hnE6cAlZnYhkElkDGIVsB8oC84e+ppZmbuPBcqB\nIqA86GLKAXaEGJ8cReobmnh40SbOnTSU4TlZce+XkZbCeZOHcd7kYWzdvZ/Hl1bwl8Wb+O7cUm79\n6ypOHzuEOVOHc+7kYeRkpYf4LxBJvFDHIA6+SOQM4uutr2IK1te1GoO4BTje3T8fDFJf4e4f6+i4\nGoOQeP1l0Sa+8cgK/vC5kznt2CGdOpa7s2pzLU+uqOTJFZsp37mP9FRj5rg85hQPZ/bEoQzIVLKQ\n7qu7jEEcjt8CD5hZGZEzh2uSHI/0Eu7O/Qs2Mi6/P6ceM7jTxzMzphTkMKUgh2+dP4Hl5TU8uXwz\nT62s5IW11WSkpXDWhDzmTB3B2RPz6ZvRnX7NROKXkE+uu78MvBxlff9Wy/VExidEutSyTbtYWVHD\njy6dTJsLIzrNzJhWlMu0olz+7cKJLHl/J0+uqOSplZU8s2oLWempzJqYz5zjh3PWcflkph86OC7S\nXelPG+n17l+wkf590rh8RmGor5OSYpSMHkTJ6EF8f84k3tqwgydXbGbeyiqeWlFJv4xUZk8aypyp\nI5g5fkjUK6lEuhMlCOnVttXt56kVlVx7UhH9+yTu456aYpxyzGBOOWYwP7x4Mm+8G0kW81dV8ddl\nm+mXkcqEYQMYlz+AcUP7Mza/P+OGDmBETmaXn+WIHCklCOnVHn5rEweamvnUqaOSFkNaagofGTeE\nj4wbwo8um8LrZdt4cW0167bs5oW1W3h40aaDbftlpDI2vz/H5vePJI/8/owb2p/CgX1JTVHikMRS\ngpBeq7GpmYfe2MjpYwczNn9A7B0SID01hTMn5HPmhPyD63bsOUBZdR3rq3ezfksdZdV1/KNsO48t\nqTjYpk9aCsfmBWca+ZGfw3OzGJadyZD+GbrLW0KhBCG91gtrq9lcU88PLp6c7FA6NKhfBieNGcRJ\nYwZ9aH1tfQNl1XWUbQmSR3Udizfu5Inlmz/ULsVgSP8+DM3ODB59GJadydCcyPNhwbqcrHR1X8lh\nUYKQXuv+BRsYkZPJ7In5Mdt2R9mZ6cwYOZAZIwd+aP2e/Y28t20PVTX1bNldz5aaerbU7qeqtp7y\nnXtZvHEHO/c2HHK8PmkpBxNG4aAs/mX2eIoG9U3UP0d6ICUI6ZXKqnfzetl2vnHehF7X/dKvT9rB\n+zDaU9/QxNbd+9lSW09VbSSBbKmtjzyvqefZVVt4dd1W7rnuRKYVtZ1YWSRCCUJ6pQcWbCQjNYWr\nTyxKdihJkZmeStGgvu2eIbyztY7rf/cm19y9gF9cM51zJw9LcITSEyhBSK9Tt7+RR5dUcNHU4Qzp\n3yfZ4XRLx+b1Z+4XT+fG+xZx84OL+cGcSdxw+phkh5UQ72yt4/evb2DP/sZkh9IpV55QyGljOzdt\nTCxKENLrzF1aQd3+xqRe2toTDOnfhz997hS+8qel3Pa31WzasY/vXjSx115Ou61uP3c8v54/vPk+\nGakpDBnQs2finTk+L/TXUIKQXsXduf8fGzi+IIfp6luPKSsjlTs/eQL/56nV3Pv6e1Ts2svPr55O\nVkbvuct734Em7n39Pe58+R32NTTxiZNH8s9nj9PZZRyUIKRXeePdHayvruM/r5yqSzrjlJpi3Hrx\nZIoG9uVHT63m2t+8wT3XlfT4L9CmZmfu0gp++szbVNXWc86koXz7guM4Nk8Fn+KlBCG9yv0LNpDb\nN51LikckO5Qe5zMfGUPBwCy+8qelXPGrf/D7G07kmB76Zfra+m38+Ok1rKmspbgwhzuumcbJXTCT\n79Gmd13/J0e1ypp9PLt6C1eXFGnW1CN03uRh/PFzp7BnfyNX3PkP3trQs2p2ra2q5bp73+STv13I\n7voGfnHtdOZ+8XQlhyOkBCG9xh8Wvk+zO588RYPTnTF95EDmfvF0BvXN4BP3LOTJFZtj75RkW2rr\n+dYjK7jwjr+z9P2dfPfCibzwr2dwSfEIUnrpoHsiqItJeoUDjc388c1NzJqQr7uDu8DIwX159Aun\ncdMDi/jSH5ZSvnMfN888ptuN6+zZ38hdr77Lb159l8bmZm44fQxfnjWW3L49+wql7kIJQnqFeaWV\nbKvbr0tbu9DAfhk8cOPJfP0vy/nJvLVs2rGX2y6Z3C3uTG9saubPi8r57+fWsa1uPxdNHc43z5vA\nqMH9kh1ar6IEIb3C/Qs2MnpwX2aOC//a8KNJZnoqv7hmOoUD+/LrV96hsqaeX147nX6HUVtj34Em\nKnbtpXznPsp37qNi1z621NSzv6kZd6e5GZrdafbIZcoty83uuLdsa93Oqd69n/Kd+ygZNZC7P33C\nIfNVSddQgpAer7SihsUbd/K9iyaqvzkEKSnGty84jqJBWXz/8VKuvnsB9153IvnZmbg7tfsaKd+1\nl4rgy7+iVSKo2LWPHXsOfOh46alG/oBM+qSnkGJGihH8NFJSIsv2ofWR0q4pKZBmkX3GD83gexdN\n5LzJw7pdt1dvogQhPd4DCzaSlZ7KVSccnfMuJconTh7FiJwsbvnDEi765WsM7pdB+c591LWZsiIz\nPYWC3CwKB/bl+MKcYDmLgtwsCgZmkT8gs9ferd3bKEFIj1azt4G/Lq/g8ukF5PRNT3Y4vd5Zx+Xz\n55tP5Sfz1pKZnsopxwz+IAEESWBQvwz9Vd9LKEFIwr21YQffm1vKuZOH8vGTRzI8J+uIj/WXxZuo\nb2jmU6eM7roApUNTCnJ48LMnJzsMSYDkX44gR5XGpma+O3cl5Tv38v9eKuMjt7/EzQ8s4vWybbj7\nYR2rudl54I2NnDh6IJNGZIcUscjRS2cQklAPLXyfdVvq+PUnT2DyiGweWvg+D7/1Ps+s2sIxef34\n1CmjuGJGITlZsbuLXlm/lY3b9/Kv505IQOQiRx873L/aupOSkhJftGhRssOQOO3cc4Azf/oyUwqy\nefDGkw/2U9c3NPH0ykruX7CRZZt2kZWeymXTC/jUKaM6PDO44XdvUrq5lte/NYuMNJ0Mi8TLzBa7\ne0msdjqDkIT52XNvU7e/kVsvnvyhQczM9FSumFHIFTMKWVlew4NvbGTu0nL++Ob7lIwayKdOHcUF\nU4Z/KAls3L6Hl9dt5cuzxik5iIREv1mSEKs31/KHhe/zqVNGMX7ogHbbHV+Yw+1XTmXhd2bzvYsm\nsq1uP1/50zJO+8kL/PSZt6nYtQ+AB9/YSKoZnzh5ZKL+CSJHHZ1BSOjcnX9/chU5Wel8dfa4uPbJ\n6ZvOZz96DJ85fQx/L9vGAws28quXy/jVy2XMnjiUhe/t4LzJwxianRly9CJHLyUICd280ireeHcH\nP7psymFPopaSYpwxPo8zxudRvnMvf1j4Pg+/tYmafQ1cd9rocAIWESABg9RmlgosAircfY6ZPQSU\nAA3Am8DN7t5gkU7pO4ALgb3A9e6+pKNja5C6+6tvaOLsn73CgMw0nvrnj3bJHbT7G5vYuH1vh11V\nItK+eAepEzEG8RVgTavnDwHHAccDWcBng/UXAOOCx03AnQmITUJ21yvvUrFrH7dePLnLplfok5aq\n5CCSAKEmCDMrBC4C7mlZ5+5Pe4DIGURhsOlS4P5g0xtArpkNDzM+CdfmXfu485UyLjx+GKceq4pe\nIj1N2GcQPwe+CTS33WBm6cCngPnBqgJgU6sm5cE66aH+Y95a3OHfLpyY7FBE5AiEliDMbA5Q7e6L\n22nyK+BVd/97yy5R2hwyQGJmN5nZIjNbtHXr1i6KVrram+/t4G/LN3PzGcdSOFAV3kR6ojDPIE4H\nLjGzDcCfgFlm9iCAmd0K5AFfa9W+HGg9X3MhcEgxXHe/291L3L0kL0/FYbqjpmbnh0+sYnhOJp8/\n45hkhyMiR+iwEoSZ9QuuSorJ3b/j7oXuPhq4BnjR3T9pZp8FzgOudffWXU9PAJ+2iFOAGnevPJz4\npHv486JNrK6s5TsXTqRvhq6kFumpOkwQZpZiZh83s6fMrBpYC1Sa2Soz+y8zi++upw/7NTAUWGBm\ny8zsB8H6p4F3gTLgN8AXj+DYkmQ1+xr4r2fe5qTRg7h4qq4xEOnJYv159xLwPPAdoLTlL34zGwSc\nBfzEzOa6+4MdHcTdXwZeDpajvmZwVdMthxO8dD93PL+enXsP8IOLJ6lojEgPFytBzHb3hrYr3X0H\n8CjwaHA1kghl1bu5f8EGrjmxiCkFOckOR0Q6qcMupuAO5xQzK+2oTdeHJT1NZL6lNWRlpPJ11WcQ\n6RViDlIH3UrLzUzTZkq7XlhTzavrtvLV2eMZ3L9PssMRkS4Q7yUmw4FVZvYmsKdlpbtfEkpU0qPs\nb2ziR0+t5ti8fnz61FHJDkdEuki8CeK2UKOQhDvQ2NxlhXZ+9/oGNm7fy32fOYn0VJUYEekt4koQ\n7v6KmY0Cxrn782bWF4jrfgjpfuaXVvGFhxZz2rGDuWxaAedPGcaAzCO71qC6tp5fvrCe2RPzOWO8\nblwU6U3i+nPPzD4HPALcFawqAB4PKygJ19yl5WRnprNpxz6+8cgKSv7P83zpD0t4Yc0WGpoOmTar\nQ7fPf5uGJud7F00KKVoRSZZ4u5huAU4CFgK4+3ozyw8tKgnNvgNNvLJuKx8rKeK2Syaz5P1dPL60\ngidXbObJFZUM6pfBnKnDuWx6AdOLcju8l2Hp+zt5dEk5nz/jWEYP6ZfAf4WIJEK8CWK/ux9o+bIw\nszSiTKQn3d9rZduob2jm3EnDMDNOGDWQE0YN5PtzJvHquq3MXVbBn97axP0LNjJ6cF8um17AZdMK\nDkkAzc3ObX9bTd6APnxp1tgk/WtEJEzxJohXzOzfgCwzO4fINBh/Cy8sCcuzq6oYkJnGyccM+tD6\njLQUZk8ayuxJQ6mtb2B+aRWPL63gjhfW8/Pn1zN9ZC6XTy/gouOHM7h/H+YurWDZpl389Kpi+vfR\nfEsivVFcJUfNLAW4ETiXyLTcz7j7b0KOLSaVHD08jU3NnPjj5zljfB4/v2Z6XPtU1uzjiWWbmbu0\ngrVVu0lLMWaOz2NlRQ0jcrOY+4XTSOmiSnEikhjxlhyN90+/L7v7HUQm0Wt5ga8E66SHWLxxJzv3\nNnDu5GFx7zM8J4ubzziWm884ljWVtTy+rIK/Lt3Mjj0HuPtTJyg5iPRi8SaI64C2yeD6KOukG3t2\n9RYy0lKYeYSXo04cns3E4dl887zj2Ln3AEN0x7RIr9ZhgjCza4GPA2PM7IlWmwYA28MMTLqWu/Ps\n6io+MnZIp8cMUlNMyUHkKBDrm+IfQCUwBPhZq/W7gRVhBSVdb23Vbjbt2MctZ+qKIxGJT4cJwt03\nAhvN7FV3f6X1NjO7HfhWmMFJ13l21RbM4OyJQ5Mdioj0EPFOnHNOlHUXdGUgEq5nV1dxwsiB5A1Q\n15CIxCdWydEvmNlK4DgzW9Hq8R7qYuoxynfuZdXmWs6drLMHEYlfrDGIPwDzgP8Avt1q/e6gqpz0\nAM+t3gLAOZPiv7xVRCRWRbkad9/g7tcCRcCsYFwixczGJCRC6bRnV21h/ND+jNF8SSJyGOKdzfVW\nIgPS3wlWZQAPhhWUdJ2dew7w5oYdnKuzBxE5TPEOUl8OXEJQTc7dNxO5F0K6uRfXVtPU7Bp/EJHD\nFm+COOCRSZscwMzUV9FDPLu6imHZmRxfkJPsUESkh4k3QfzZzO4CcoPiQc/Tal4m6Z5aaj+cO3lo\nh3UdRESiibfk6E+Dab5rgfHAD9z9uVAjk05rXftBRORwHc6kPCuBLCLdTCvDCUe6Unu1H0RE4hHv\nVUyfBd4ErgCuBN4ws8+EGZh0TmNTM8+v2cLZx+WTnhpvT6KIyAfiPYP4BjDd3bcDmNlgIhP53RtW\nYNI5R1L7QUSktXj/tCwnMoNri93Apq4PR7rKs6u3kJF65LUfRERi1YP4WrBYASw0s78SGYO4lEiX\nk3RDLbUfTh87WPWiReSIxTqDGBA83gEeJ7gPAvgrkToRMZlZqpktNbMng+djzGyhma03s4fNLCNY\n3yd4XhZsH30E/x7hg9oP6l4Skc6IVQ/iti54ja8Aa4Ds4PntwP+4+5/M7NfAjcCdwc+d7j7WzK4J\n2l3dBa9/1Pmg9kN+skMRkR4s1MtbzKwQuAi4J3huwCzgkaDJfcBlwfKlwXOC7Web7u46Is+urmLG\nyIHkD8hMdigi0oOFff3jz4FvAs3B88HALndvDJ6XAwXBcgHBwHewvSZoL4fhYO2HSZp7SUQ6J7QE\nYWZzgGp3X9x6dZSmHse21se9ycwWmdmirVu3dkGkvUtL7QeNP4hIZ8V7o9x/mlm2maWb2Qtmts3M\nPhljt9OBS8xsA/AnIl1LPycyn1PL2EchsDlYLidSc4Jgew5wSFEid7/b3UvcvSQvT5dwtvXsqi2M\ny1ftBxHpvHjPIM5191pgDpEv8vFEbp5rl7t/x90L3X00cA3wort/AniJyN3YANcRuSIK4IngOcH2\nF4MZZCVOB2s/aGpvEekC8SaI9ODnhcAfO1lu9FvA18ysjMgYw2+D9b8FBgfrv8aHS5xKHA7WftDk\nfCLSBeK9i+pvZrYW2Ad80czygPp4X8TdXwZeDpbfBU6K0qYeuCreY8qhVPtBRLpSXGcQ7v5t4FSg\nxN0biFSWuzTMwOTwtNR+OGfSUFJSdHWwiHRerKk2Zrn7i2Z2Rat1rZs8FlZgcngO1n7Q+IOIdJFY\nXUxnAC8CF0fZ5ihBdBsHaz+M0a0jItI1Yk21cWvw84bEhCNHoqX2w6zj8slIU+0HEeka+jbpBQ7W\nftDVSyLShZQgeoGW2g9nTNCNgyLSdWImCDNLMbPTEhGMHD7VfhCRsMRMEO7eDPwsAbHIEVDtBxEJ\nS7xdTM+a2T9p+u3uR7UfRCQs8fZJfA3oBzSZ2T4iM6+6u2d3vJuETbUfRCQs8d5JPcDdU9w93d2z\ng+dKDkmm2g8iEqZ4p/s2M/ukmX0/eF5kZofMpySJpdoPIhKmeMcgfkVkLqaPB8/rgP8NJSKJm2o/\niEiY4k0QJ7v7LQQzuLr7TiAjtKgkJtV+EJGwxZsgGswslaAEaDDdd3PHu0iYVPtBRMIWb4L4BTAX\nyDezHwOvAf83tKgkJtV+EJGwxXWZq7s/ZGaLgbOJXOJ6mbuvCTUyaVdL7YerTihS7QcRCU1cCcLM\n/h34O/B7d98TbkgSi2o/iEgixNvFtAG4FlhkZm+a2c/MTBXlkmR+qWo/iEj44r1R7l53/wxwFvAg\nkdrRD4YZmETXENR+OGfiUNV+EJFQxdvFdA8wCdhCpKvpSmBJiHFJOxa8s52afQ2cP0VXL4lIuOL9\nE3QwkArsAnYA29y9MbSopF3zSqvom5HKzPGq/SAi4Yr3KqbLAcxsInAe8JKZpbp7YZjByYc1NTvP\nra7irOPyyUxPTXY4ItLLxdvFNAf4KDATGAi8SKSrSRJo0YYdbKs7wAXqXhKRBIh3uu8LgFeBO9x9\nc4jxSAfmlVaRkZbCWRNU+0FEwhdvF9MtZjYUONHMZgBvunt1uKFJa83NzjOrqpg5Lo9+Ki0qIgkQ\n73TfVwFvErm89WPAQjO7MszA5MOWl++isqZe3UsikjDx/in6PeDElrOGYLK+54FHwgpMPmx+aRVp\nKcbsibp7WkQSI97LXFPadCltP4x9pZPcnXmlVZw2dgg5fdOTHY6IHCXiPYOYb2bPAH8Mnl8NPB1O\nSNLWmsrdvL9jL18489hkhyIiR5F4p9r4BnA3MBUoBu529291tI+ZZQbzNi03s1Vmdluw/mwzW2Jm\ny8zsNTMbG6zvY2YPm1mZmS00s9Gd+Yf1JvNLK0kxVHtaRBIq7sth3P1R4NHDOPZ+YJa715lZOvCa\nmc0D7gQudfc1ZvZFIuMb1wM3AjvdfayZXQPcTuRM5ag3r7SKk8YMYnD/PskORUSOIh2eQZjZbjOr\njfLYbWa1He3rEXXB0/Tg4cEjO1ifA7TcV3EpcF+w/Ahwtpkd9cUOyqrrWF9dx/mTdfWSiCRWh2cQ\n7j6gMwcPypQuBsYC/+vuC83ss8DTZrYPqAVOCZoXAJuC1200sxoic0Bt60wM7dl3oImsjO4/XcX8\n0koAzp8yPMmRiMjRJtYZRP9YB+iojbs3ufs0oBA4ycymAP8CXBjM4/Q74L9bDhXtEFFe7yYzW2Rm\ni7Zu3RorvKjueuUdiv/9WfY3Nh3R/ok0r7SK6SNzGZaTmexQROQoE2uQ+q9BcaCZZtavZaWZHWNm\nNwZXNp0f60XcfRfwMpEpO4rdfWGw6WHgtGC5HCgKjp9GpPtpR5Rj3e3uJe5ekpd3ZDOajhrclwON\nzayp3H1E+yfKph17WbW5VjfHiUhSdJgg3P1s4AXgZmCVmdWY2XYixYKGAde5e9Sb5cwsz8xyg+Us\nYDawBsgxs/FBs3OCdQBPANcFy1cCL7r7IWcQXaG4KBeA5Zt2hXH4LjO/tAqAC9S9JCJJEPMqJnd/\nmiO752E4cF8wDpEC/NndnzSzzwGPmlkzsBP4TND+t8ADZlZG5MzhmiN4zbgMy84kf0Cfbp8g5pVW\nMnlENkWD+iY7FBE5CoU265u7rwCmR1k/F5gbZX09kbmeQmdmFBflsry8+yaIqpp6lry/i389Z3zs\nxiIiIThqp8soLszhna17qK1vSHYoUT2zKuheOl7jDyKSHEdvggjGIVaW1yQ5kujmlVYyNr8/Y/M7\ndaWxiMgRi3WZ66xWy2PabLsirKASYWpBJEEs64bjENvr9vPmezt09ZKIJFWsM4iftlpuO83G97o4\nloTK6ZvOMUP6dcuB6udWb6HZ4XwlCBFJolgJwtpZjva8x5lamMOKbtjFNK+0ipGD+jJpeHbsxiIi\nIYmVILyd5WjPe5ziolyqauupqqlPdigH1exr4B/vbOP8KcPQVFQikkyxLnM9xsyeIHK20LJM8HxM\n+7v1DAdvmCvfxbCc7tGd88KaLTQ0ubqXRCTpYiWIS1st/7TNtrbPe5xJw7NJSzGWb9rFed1kttR5\npVUMy85kWmFuskMRkaNcrNlcX2n9PKjrMAWoaFOCtEfKTE9l4vDsbjMOsWd/I6+u28q1J40kJUXd\nSyKSXLEuc/21mU0OlnOA5cD9wFIzuzYB8YVuamEOy8t30dyc/CGVl9/eyv7GZnUviUi3EGuQ+qPu\nvipYvgFY5+7HAycA3ww1sgQpLspld30j723fk+xQmFdayZD+GZw4elCyQxERiZkgDrRaPgd4HMDd\nq0KLKMGmdZOZXesbmnhpbTXnTBpGqrqXRKQbiJUgdpnZHDObDpwOzIeD9Rqywg4uEY7N60+/jNSk\nJ4i/r9/GngNN6l4SkW4j1lVMNwO/IFL74autzhzOBp4KM7BESU0xphTksDzJA9XzSivJzkzj1GMG\nJzUOEZEWsa5iWkeUinHu/gzwTFhBJdq0olx+9/oGDjQ2k5GW+PkLG5qaeX71FmZPGpqU1xcRiabD\nBGFmv+hou7v/c9eGkxzFRbkcaGpmbVUtU5Nw/8GCd7ZTW9+oynEi0q3E6mL6PFAK/BnYTC+Yfyma\n1iVIk5Eg5pVW0S8jlY+OG5Lw1xYRaU+sBDGcSJW3q4FG4GHgUXffGXZgiTQiJ5Mh/fuwvLyGTyX4\ntZuanedWV3HWcflkpqcm+NVFRNrXYYe3u29391+7+1nA9UAusMrMEv09Giozo7gwJylXMr21YQfb\n6g7o6iUR6XbiGhE1sxnAV4FPAvOAxWEGlQzFRbmUba1jd4JLkM4vraJPWgpnTchP6OuKiMQSa6qN\n28xsMfA14BWgxN1vdPfVCYkugYqLcnGHlRWJu9y1udmZX1rFzPF59OsTq7dPRCSxYp1BfB/IAYqB\n/wCWmNkKM1tpZitCjy6BigtzAFi+KXEJYnn5Lqpq61VaVES6pVh/tvb4mg/xyu2bwajBfVlRnrhx\niPmlVaQdeAFmAAAP4klEQVSnGmdPHJqw1xQRiVesG+U2RltvZqnANUDU7T1VcWEuizbsSMhruTvz\nSqs47dgh5GSlJ+Q1RUQOR6wxiGwz+46Z/T8zO9civgy8C3wsMSEmTnFRLptr6qmuDb8E6erKWt7f\nsVdXL4lItxVrDOIBYAKwEvgs8CxwJXCpu1/a0Y490bSiYBwiAfMyzS+tIsXg3EnqXhKR7ilmTeqg\n/gNmdg+wDRjp7rtDjywJJo/IITUoQXpOyF/c80urOGnMIAb37xPq64iIHKlYZxAHbwpw9ybgvd6a\nHCBSgnTC0AEsD3mguqy6jvXVdZp7SUS6tVhnEMVmVhssG5AVPDfA3T071OiSoLgol6dWbMbdMQtn\n6qknV2zGDM6brPEHEem+Yk21keru2cFjgLuntVrudckBIuMQtfWNbNi+N5Tjuztzl1Zw6jGDGZaT\nGcpriIh0hdCKD5hZppm9aWbLzWyVmd0WrDcz+7GZrTOzNWb2z63W/8LMyoKb8WaEFVtHikMuQbrk\n/Z1s3L6XK2YUhnJ8EZGuEub8DvuBWe5eZ2bpwGtmNg+YCBQBx7l7s5m1TEJ0ATAueJwM3Bn8TKix\nef3JSk9lefkuLpte0OXHf2RxBVnpqbp7WkS6vdAShLs7UBc8TQ8eDnwB+Li7NwftqoM2lwL3B/u9\nYWa5Zjbc3SvDijGatNQUji8IZ2bX+oYmnlyxmQumDNPcSyLS7YVa39LMUs1sGVANPOfuC4FjgavN\nbJGZzTOzcUHzAmBTq93Lg3Vtj3lTsO+irVu3hhJ3cVEOpZtraWhq7tLjvrCmmt31jepeEpEeIdQE\n4e5N7j4NKAROMrMpQB+g3t1LgN8A9wbNo10y5FGOebe7l7h7SV5eXihxFxflcqCxmberuvaK3seW\nlDMsO5NTjx3cpccVEQlDqAmihbvvAl4GzidyZvBosGkuMDVYLicyNtGikEiZ04QrDsqOLuvCbqZt\ndft5ed1WLpteQGpKr6zcKiK9TJhXMeWZWW6wnAXMBtYCjwOzgmZnAOuC5SeATwdXM50C1CR6/KFF\n4cAsBvXL6NKZXZ9YtpmmZueKGV0/8C0iEoYwR0qHA/cFM7+mAH929yfN7DXgITP7FyKD2J8N2j8N\nXAiUAXuBG0KMrUMflCDtujmZHltazvEFOYwfOqDLjikiEqYwr2JaAUyPsn4XcFGU9Q7cElY8h6u4\nKJeX162nbn8j/Tt5xdHbVbsprajl1osndVF0IiLhS8gYRE/UUoK0tAtKkD62pJy0FOOS4hFdEJmI\nSGIoQbSjZaC6s/dDNDVHptY4c0K+Zm4VkR5FCaIdg/plUDQoixWdrA3xetk2qnfv5580OC0iPYwS\nRAeKC3M7fanrY0vKyc5MY9bE/NiNRUS6ESWIDkwryqVi1z627t5/RPvX7W9k/qoqLi4eQZ+01C6O\nTkQkXEoQHWiZ2fVI74eYt7KS+oZmTa0hIj2SEkQHJo/IJsWOvEb1Y0sqGD24LzNG5nZxZCIi4VOC\n6EDfjDTGDx1wRFcyle/cy4J3t3PFjMLQKtOJiIRJCSKGaUW5LC/fReQ+vvg9vrQCgMtDqCkhIpII\nShAxFBflsmtvA+/viL8Eqbvz2JIKThoziKJBfUOMTkQkPEoQMRzJzK7LNu3i3W17uFKD0yLSgylB\nxDB+aH8y01MO64a5x5ZU0CcthQuOV1lREem5lCBiSEtNYcqI+EuQ7m9s4m8rNnPe5GEMyEwPOToR\nkfAoQcShuCiX0s01cZUgfWntVnbtbVDdBxHp8ZQg4lBclEt9QzPrtsQuQfrYknLyBvThI2OHJCAy\nEZHwKEHEobgwByBmAaEdew7w0tvVXDZtBGmpemtFpGfTt1gcRg7qS27f9JhTbvxt+WYamlxTa4hI\nr6AEEYdICdLYM7s+tqScicOzmTg8O0GRiYiERwkiTsVFuazbspu9Bxqjbi+r3s3y8hrVfRCRXkMJ\nIk7TinJodiitqI26/bElFaSmGJdMU1lREekdlCDiNLWw/am/m4OyojPHDSF/QGaiQxMRCYUSRJyG\n9O9DQW5W1HGIN97dTmVNvQanRaRXUYI4DC0zu7b16JIKBvRJ45xJQ5MQlYhIOJQgDkNxUQ6bduxj\ne90HJUj3HmhkXmklF00dTma6yoqKSO+hBHEYPhiH+OCGufmlVew90KTuJRHpdZQgDsPxBTlBCdIP\nupkeW1JB0aAsSkYNTGJkIiJdTwniMPTrk8a4/A9KkFbW7OP1d7Zx+fRCUlJUVlREehcliMNUXJTD\n8vIa3J3Hl27GHa5QWVER6YWUIA5TcVEuO/YcYNOOfTy2pJySUQMZPaRfssMSEelyoSUIM8s0szfN\nbLmZrTKz29ps/6WZ1bV63sfMHjazMjNbaGajw4qtM1pKkD60cCPrq+s0OC0ivVaYZxD7gVnuXgxM\nA843s1MAzKwEyG3T/kZgp7uPBf4HuD3E2I7YhGEDyEhL4d7X3yMjLYWLjh+e7JBEREIRWoLwiJYz\nhPTg4WaWCvwX8M02u1wK3BcsPwKcbWbdbuQ3PTWFKSOyaWhyzpk4lJy+KisqIr1TqGMQZpZqZsuA\nauA5d18IfAl4wt0r2zQvADYBuHsjUAMMDjO+I1VcFDn5UVlREenN0sI8uLs3AdPMLBeYa2YzgauA\nM6M0j3a24Ic0MrsJuAlg5MiRXRfsYfinGYXs3d/EzPF5SXl9EZFESMhVTO6+C3gZOAsYC5SZ2Qag\nr5mVBc3KgSIAM0sDcoAdUY51t7uXuHtJXl5yvqCnFORw+5VTSVdZURHpxcK8iikvOHPAzLKA2cBi\ndx/m7qPdfTSwNxiUBngCuC5YvhJ40d0POYMQEZHECLOLaThwXzAonQL82d2f7KD9b4EHgjOKHcA1\nIcYmIiIxhJYg3H0FMD1Gm/6tluuJjE+IiEg3oE50ERGJSglCRESiUoIQEZGolCBERCQqJQgREYnK\nevKtBma2FdiY7DjaMQTYluwgOqD4Oqe7xwfdP0bF1zmdiW+Uu8e807hHJ4juzMwWuXtJsuNoj+Lr\nnO4eH3T/GBVf5yQiPnUxiYhIVEoQIiISlRJEeO5OdgAxKL7O6e7xQfePUfF1TujxaQxCRESi0hmE\niIhEpQTRCWZWZGYvmdkaM1tlZl+J0uZMM6sxs2XB4wcJjnGDma0MXntRlO1mZr8wszIzW2FmMxIY\n24RW78syM6s1s6+2aZPw98/M7jWzajMrbbVukJk9Z2brg58D29n3uqDNejO7LlqbEGL7LzNbG/z/\nzW2ZZj/Kvh1+FkKO8YdmVtHq//HCdvY938zeDj6P305gfA+3im1DUAkz2r6hvoftfack7fPn7noc\n4YPIlOYzguUBwDpgUps2ZwJPJjHGDcCQDrZfCMwjUtHvFGBhkuJMBaqIXJ+d1PcPmAnMAEpbrftP\n4NvB8reB26PsNwh4N/g5MFgemIDYzgXSguXbo8UWz2ch5Bh/CHw9js/AO8AxQAawvO3vU1jxtdn+\nM+AHyXgP2/tOSdbnT2cQneDule6+JFjeDawhUlu7J7kUuN8j3gByzWx4EuI4G3jH3ZN+46O7v8qh\n1QwvBe4Llu8DLouy63lEaq/vcPedwHPA+WHH5u7PeqSOO8AbQGFXvubhauf9i8dJQJm7v+vuB4A/\nEXnfu1RH8ZmZAR8D/tjVrxuPDr5TkvL5U4LoImY2mkj9i4VRNp9qZsvNbJ6ZTU5oYJG63s+a2eKg\nnndbBcCmVs/LSU6Su4b2fymT+f61GOrulRD5JQbyo7TpDu/lZ4icEUYT67MQti8F3WD3ttNF0h3e\nv48CW9x9fTvbE/YetvlOScrnTwmiC5hZf+BR4KvuXttm8xIi3SbFwC+BxxMc3unuPgO4ALjFzGa2\n2W5R9knopW1mlgFcAvwlyuZkv3+HI6nvpZl9F2gEHmqnSazPQpjuBI4FpgGVRLpx2kr6ZxG4lo7P\nHhLyHsb4Tml3tyjrOvX+KUF0kpmlE/mPfMjdH2u73d1r3b0uWH4aSDezIYmKz903Bz+rgblETuNb\nKweKWj0vBDYnJrqDLgCWuPuWthuS/f61sqWl6y34WR2lTdLey2BAcg7wCQ86pNuK47MQGnff4u5N\n7t4M/Kad107qZ9HM0oArgIfba5OI97Cd75SkfP6UIDoh6K/8LbDG3f+7nTbDgnaY2UlE3vPtCYqv\nn5kNaFkmMphZ2qbZE8Cng6uZTgFqWk5lE6jdv9qS+f618QTQclXIdcBfo7R5BjjXzAYGXSjnButC\nZWbnA98CLnH3ve20ieezEGaMrce1Lm/ntd8CxpnZmOCs8hoi73uizAbWunt5tI2JeA87+E5Jzucv\nrNH4o+EBfITIKdwKYFnwuBD4PPD5oM2XgFVErsh4AzgtgfEdE7zu8iCG7wbrW8dnwP8SuXpkJVCS\n4PewL5Ev/JxW65L6/hFJVpVAA5G/ym4EBgMvAOuDn4OCtiXAPa32/QxQFjxuSFBsZUT6nls+g78O\n2o4Anu7os5DA9++B4PO1gsiX3fC2MQbPLyRy5c47YcUYLb5g/e9bPnet2ib0PezgOyUpnz/dSS0i\nIlGpi0lERKJSghARkaiUIEREJColCBERiUoJQkREolKCEBGRqJQgRBIgmCb6iO4AN7PrzWxEVxxL\n5HAoQYh0f9cTuWFLJKGUIOSoYmajg+I695hZqZk9ZGazzez1oMjKScHjH2a2NPg5Idj3a2Z2b7B8\nfLB/33ZeZ7CZPRsc4y5aTaRmZp80szeDojN3mVlqsL7OzH5mZkvM7AUzyzOzK4ncLftQ0D4rOMyX\ng3Yrzey4MN8zOXopQcjRaCxwBzAVOA74OJEpDr4O/BuwFpjp7tOBHwD/N9jv58BYM7sc+B1ws7cz\n9xFwK/BacIwngJEAZjYRuJrIrKDTgCbgE8E+/YhMWjgDeAW41d0fARYRmYRvmrvvC9puC9rdGcQt\n0uXSkh2ASBK85+4rAcxsFfCCu7uZrQRGAznAfWY2jsi8OOkA7t5sZtcTmSfnLnd/vYPXmElkZlDc\n/Skz2xmsPxs4AXgrmIMwiw9m5mzmg5lEHwQOmR24lZZti1teR6SrKUHI0Wh/q+XmVs+bifxO/Ah4\nyd0vD4q2vNyq/TigjvjGBKJNdGbAfe7+nSPcv0VLzE3o91hCoi4mkUPlABXB8vUtK80sh0jX1Exg\ncDA+0J5XCbqOzOwCIjWCITIT55Vmlh9sG2Rmo4JtKUDLMT8OvBYs7yZSn1gkoZQgRA71n8B/mNnr\nQGqr9f8D/Mrd1xGZwvonLV/0UdwGzDSzJUTm5X8fwN1XA98jUrZyBZG6wS21EvYAk81sMTAL+Pdg\n/e+BX7cZpBYJnab7FukmzKzO3fsnOw6RFjqDEBGRqHQGIdIJZnYD8JU2q19391uSEY9IV1KCEBGR\nqNTFJCIiUSlBiIhIVEoQIiISlRKEiIhEpQQhIiJR/X+sZ1GSeYS+xAAAAABJRU5ErkJggg==\n",
=======
      "image/png": "\n",
>>>>>>> upstream/master
      "text/plain": [
<<<<<<< HEAD
       "<matplotlib.figure.Figure at 0x20b25a0ff60>"
||||||| merged common ancestors
       "<matplotlib.figure.Figure at 0x118181860>"
=======
       "<Figure size 432x288 with 1 Axes>"
>>>>>>> upstream/master
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot max_depth (x-axis) versus RMSE (y-axis).\n",
    "plt.plot(max_depth_range, RMSE_scores);\n",
    "plt.xlabel('max_depth');\n",
    "plt.ylabel('RMSE (lower is better)');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(340.034168704752, 2)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the best RMSE and the corresponding max_depth.\n",
    "sorted(zip(RMSE_scores, max_depth_range))[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(criterion='mse', max_depth=2, max_features=None,\n",
       "           max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "           min_impurity_split=None, min_samples_leaf=1,\n",
       "           min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "           presort=False, random_state=1, splitter='best')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# max_depth=2 was best, so fit a tree using that parameter.\n",
    "treereg = DecisionTreeRegressor(max_depth=2, random_state=1)\n",
    "treereg.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AtBat</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>HmRun</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Runs</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RBI</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Walks</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>League</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Division</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>PutOuts</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Assists</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Errors</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>NewLeague</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Years</td>\n",
       "      <td>0.488391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hits</td>\n",
       "      <td>0.511609</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      feature  importance\n",
       "0       AtBat    0.000000\n",
       "2       HmRun    0.000000\n",
       "3        Runs    0.000000\n",
       "4         RBI    0.000000\n",
       "5       Walks    0.000000\n",
       "7      League    0.000000\n",
       "8    Division    0.000000\n",
       "9     PutOuts    0.000000\n",
       "10    Assists    0.000000\n",
       "11     Errors    0.000000\n",
       "12  NewLeague    0.000000\n",
       "6       Years    0.488391\n",
       "1        Hits    0.511609"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute feature importances.\n",
    "pd.DataFrame({'feature':feature_cols, 'importance':treereg.feature_importances_}).sort_values(by='importance')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"random-forest-demo\"></a>\n",
    "## Predicting Salary With a Random Forest\n",
    "\n",
    "### Fitting a Random Forest With the Best Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
       "           max_features=5, max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "           min_impurity_split=None, min_samples_leaf=1,\n",
       "           min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "           n_estimators=150, n_jobs=1, oob_score=True, random_state=1,\n",
       "           verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# max_features=5 is best and n_estimators=150 is sufficiently large.\n",
    "rfreg = RandomForestRegressor(n_estimators=150, max_features=5, \n",
    "                              oob_score=True, random_state=1)\n",
    "rfreg.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>NewLeague</td>\n",
       "      <td>0.004220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>League</td>\n",
       "      <td>0.004647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Division</td>\n",
       "      <td>0.008690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Assists</td>\n",
       "      <td>0.027348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Errors</td>\n",
       "      <td>0.037357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>HmRun</td>\n",
       "      <td>0.040278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>PutOuts</td>\n",
       "      <td>0.063006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Runs</td>\n",
       "      <td>0.080400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AtBat</td>\n",
       "      <td>0.091355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>RBI</td>\n",
       "      <td>0.133843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Walks</td>\n",
       "      <td>0.137514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hits</td>\n",
       "      <td>0.146523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Years</td>\n",
       "      <td>0.224819</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      feature  importance\n",
       "12  NewLeague    0.004220\n",
       "7      League    0.004647\n",
       "8    Division    0.008690\n",
       "10    Assists    0.027348\n",
       "11     Errors    0.037357\n",
       "2       HmRun    0.040278\n",
       "9     PutOuts    0.063006\n",
       "3        Runs    0.080400\n",
       "0       AtBat    0.091355\n",
       "4         RBI    0.133843\n",
       "5       Walks    0.137514\n",
       "1        Hits    0.146523\n",
       "6       Years    0.224819"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute feature importances.\n",
    "pd.DataFrame({'feature':feature_cols, 'importance':rfreg.feature_importances_}).sort_values(by='importance')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5229265024781719\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "293.85082625794416"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute the out-of-bag R-squared score.\n",
    "print((rfreg.oob_score_))\n",
    "\n",
    "# Find the average RMSE.\n",
    "scores = cross_val_score(rfreg, X, y, cv=10, scoring='neg_mean_squared_error')\n",
    "np.mean(np.sqrt(-scores))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "#### Reducing X to its Most Important Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(263, 13)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the shape of X.\n",
    "X.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "** It important not to select features before separating your train from your test otherwise you are selecting features based on all known observations and introducing more of the information in the test data to the model when you fit it on the training data. **"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 36,
   "metadata": {},
||||||| merged common ancestors
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 35,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y, random_state = 89)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 37,
   "metadata": {},
||||||| merged common ancestors
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 36,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
       "           max_features=5, max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
       "           min_impurity_split=None, min_samples_leaf=1,\n",
       "           min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "           n_estimators=150, n_jobs=1, oob_score=True, random_state=1,\n",
       "           verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fit the model on only the train data\n",
    "rfreg = RandomForestRegressor(n_estimators=150, max_features=5, \n",
    "                              oob_score=True, random_state=1)\n",
    "rfreg.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 38,
   "metadata": {},
||||||| merged common ancestors
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 37,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(197, 5)\n",
      "(197, 7)\n"
     ]
    }
   ],
   "source": [
    "# Set a threshold for which features to include.\n",
    "from sklearn.feature_selection import SelectFromModel\n",
    "\n",
    "print(SelectFromModel(rfreg, threshold='mean', prefit=True).transform(X_train).shape)\n",
    "print(SelectFromModel(rfreg, threshold='median', prefit=True).transform(X_train).shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Using the fit model and the features from the train data to transform the test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# Create a new feature matrix that only includes important features.\n",
    "\n",
    "X_important =  SelectFromModel(rfreg, threshold='mean', prefit=True).transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 40,
   "metadata": {},
||||||| merged common ancestors
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 39,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "314.6605272011222"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the RMSE for a random forest that only includes important features.\n",
    "rfreg = RandomForestRegressor(n_estimators=150, max_features=3, random_state=1)\n",
    "\n",
    "scores = cross_val_score(rfreg, X_important, y_test, cv=10, scoring='neg_mean_squared_error')\n",
    "np.mean(np.sqrt(-scores))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "In this case, the error decreased slightly. Often parameter tuning is required to achieve optimal results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"comparing\"></a>\n",
    "## Comparing Random Forests With Decision Trees\n",
    "\n",
    "**Advantages of random forests:**\n",
    "\n",
    "- Their performance is competitive with the best supervised learning methods.\n",
    "- They provide a more reliable estimate of feature importance.\n",
    "- They allow you to estimate out-of-sample error without using train/test split or cross-validation.\n",
    "\n",
    "**Disadvantages of random forests:**\n",
    "\n",
    "- They are less interpretable.\n",
    "- They are slower to train.\n",
    "- They are slower to predict."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "![Machine learning flowchart](assets/driver_ensembling.png)\n",
    "\n",
    "*Machine learning flowchart created by the [second-place finisher](http://blog.kaggle.com/2015/04/20/axa-winners-interview-learning-telematic-fingerprints-from-gps-data/) of Kaggle's [Driver Telematics competition](https://www.kaggle.com/c/axa-driver-telematics-analysis)*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"tuning\"></a>\n",
    "## Optional: Tuning Individual Parameters"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 41,
   "metadata": {},
||||||| merged common ancestors
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 40,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n",
       "           max_features='auto', max_leaf_nodes=None,\n",
       "           min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "           min_samples_leaf=1, min_samples_split=2,\n",
       "           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
       "           oob_score=False, random_state=None, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "rfreg = RandomForestRegressor()\n",
    "rfreg"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Tuning n_estimators\n",
    "\n",
    "One important tuning parameter is **n_estimators**, which represents the number of trees that should be grown. This should be a large enough value that the error seems to have \"stabilized.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# List of values to try for n_estimators:\n",
    "estimator_range = list(range(10, 310, 10))\n",
    "\n",
    "# List to store the average RMSE for each value of n_estimators:\n",
    "RMSE_scores = []\n",
    "\n",
    "# Use five-fold cross-validation with each value of n_estimators (Warning: Slow!).\n",
    "for estimator in estimator_range:\n",
    "    rfreg = RandomForestRegressor(n_estimators=estimator, random_state=1)\n",
    "    MSE_scores = cross_val_score(rfreg, X, y, cv=5, scoring='neg_mean_squared_error')\n",
    "    RMSE_scores.append(np.mean(np.sqrt(-MSE_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot RMSE (y-axis) versus n_estimators (x-axis).\n",
    "\n",
    "plt.plot(estimator_range, RMSE_scores);\n",
    "\n",
    "plt.xlabel('n_estimators');\n",
    "plt.ylabel('RMSE (lower is better)');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "_** In theory, the RMSE will continue to decrease and eventually level out.  Adding more estimators will neither (noticably)increase or decrease the RMSE (or other loss metric). However, introduction of noise can lead to random spikes as the n_estimators changes. This example is particularly interesting as after about 120 estimators the RMSE seems to steadily rise as more estimators are added.**_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Tuning max_features\n",
    "\n",
    "The other important tuning parameter is **max_features**, which represents the number of features that should be considered at each split."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "# List of values to try for max_features:\n",
    "feature_range = list(range(1, len(feature_cols)+1))\n",
    "\n",
    "# List to store the average RMSE for each value of max_features:\n",
    "RMSE_scores = []\n",
    "\n",
    "# Use 10-fold cross-validation with each value of max_features (Warning: Super slow!).\n",
    "for feature in feature_range:\n",
    "    rfreg = RandomForestRegressor(n_estimators=150, max_features=feature, random_state=1)\n",
    "    MSE_scores = cross_val_score(rfreg, X, y, cv=10, scoring='neg_mean_squared_error')\n",
    "    RMSE_scores.append(np.mean(np.sqrt(-MSE_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot max_features (x-axis) versus RMSE (y-axis).\n",
    "\n",
    "plt.plot(feature_range, RMSE_scores);\n",
    "\n",
    "plt.xlabel('max_features');\n",
    "plt.ylabel('RMSE (lower is better)');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
<<<<<<< HEAD
   "metadata": {},
||||||| merged common ancestors
   "metadata": {
    "collapsed": false
   },
=======
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
>>>>>>> upstream/master
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(290.0078511328435, 10)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the best RMSE and the corresponding max_features.\n",
    "sorted(zip(RMSE_scores, feature_range))[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "parameters = {'n_estimators': estimator_range, \n",
    "              'max_features': feature_range}\n",
    "\n",
    "reg_model = GridSearchCV(reg, parameters)\n",
    "reg_model.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<a id=\"summary\"></a>\n",
    "## Summary\n",
    "\n",
    "**Which model is best?** The best classifier for a particular task is task-dependent. In many business cases, interpretability is more important than accuracy. So, decision trees may be preferred. In other cases, accuracy on unseen data might be paramount, in which case random forests would likely be better (since they typically overfit less). \n",
    "\n",
    "Remember that every model is a tradeoff between bias and variance. Ensemble models attempt to reduce overfitting by reducing variance but increasing bias (as compared to decision trees). By making the model more stable, we necessarily make it fit the training data less accurately. In some cases this is desired (particularly if we start with lots of overfitting), but for more simply structured data a simple decision tree might be best.\n",
    "\n",
    "---\n",
    "\n",
    "**In this lesson:**\n",
    "\n",
    "- We looked at ensemble models.\n",
    "\n",
    "- We saw how decision trees could be extended using two ensemble techniques -- bagging and random forests.\n",
    "\n",
    "- We looked at methods of evaluating feature importance and tuning parameters."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
<<<<<<< HEAD
   "version": "3.6.3"
||||||| merged common ancestors
   "version": "3.6"
=======
   "version": "3.5.2"
>>>>>>> upstream/master
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
